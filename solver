#!//usr/bin/env python

import sys

TEST = """- - - 5 - 6 - - -
- - - - - - - 6 2
7 - 4 - 1 - - - -
9 - - - 4 3 - - 7
- 2 - - - - - - -
- 8 - - 9 - - 5 -
- - - - - - - - -
3 - - - - 8 7 - -
- 5 - 3 - 4 - - 1"""

def parse(string):
        string =  string.split()
        return [None if i == '-' else int(i) for i in string]

PUZZLE = parse(TEST)

def load(pFile):
    with open(pFile) as f:
        return parse(f.read())

def getRow(puzzle, row):
    return puzzle[row*9:(row*9)+9]

assert(getRow(PUZZLE, 0) == [None, None, None, 5, None, 6, None, None, None])
assert(getRow(PUZZLE, 3) == [9, None, None, None, 4, 3, None, None, 7])

def isListComplete(l):
    return None not in l

def isRowComplete(puzzle, row):
    return isListComplete(getRow(puzzle, row))

assert(False == isRowComplete(PUZZLE, 0))

def isListValid(l):
    d = range(1, 10)
    for i in l:
        if i is not None:
            try:
                d.remove(i)
            except ValueError as e:
                return False
    return True

assert(True == isListValid([1, 2, 3, 4, 5, 6, 7, 8, 9]))
assert(True == isListValid([3, 2, 1, 7, 5, 4, 6, 8, 9]))
assert(False == isListValid([1, 2, 3, 4, 5, 5, 7, 8, 9]))
assert(True == isListValid([1, 2, 3, 4, 5, 6, 7, 8, None]))

def isRowValid(puzzle, row):
    return isListValid(getRow(puzzle, row))

def getCol(puzzle, col):
    return [puzzle[i] for i in range(col, col+9*9, 9)]

assert(getCol(PUZZLE, 0) == [None, None, 7, 9, None, None, None, 3, None])
assert(getCol(PUZZLE, 3) == [5, None, None, None, None, None, None, None, 3])

def isColComplete(puzzle, col):
    return isListComplete(getCol(puzzle, col))

assert(False == isColComplete(PUZZLE, 0))

def isColValid(puzzle, col):
    return isListValid(getCol(puzzle, col))

"""
 0  1  2  3  4  5  6  7  8
 9 10 11 12 13 14 15 16 17
18 19 20 21 22 23 24 25 26
27 28 29 30 31 32 33 34 35
36 37 38 39 40 41 42 43 44
45 46 47 48 49 50 51 52 53
54 55 56 57 58 59 60 61 62
63 64 65 66 67 68 69 70 71
72 73 74 75 76 77 78 79 80
"""
def getSquare(puzzle, square):
    start = {0:0,1:3,2:6,3:27,4:30,5:33,6:54,7:57,8:60}[square]
    r = range(start, start+3) + range(start+9, start+12) + range(start+18, start+21)
    return [puzzle[i] for i in r]

assert(getSquare(PUZZLE, 0) == [None, None, None, None, None, None, 7, None, 4])
assert(getSquare(PUZZLE, 4) == [None, 4, 3, None, None, None, None, 9, None])

def isSquareComplete(puzzle, square):
    return isListComplete(getSquare(puzzle, square))

def isSquareValid(puzzle, square):
    return isListValid(getSquare(puzzle, square))

def isComplete(puzzle):
    return isListComplete(puzzle)

assert(False == isComplete(PUZZLE))

def isValid(puzzle):
    for i in range(9):
        if not isRowValid(puzzle, i):
            return False
        if not isColValid(puzzle, i):
            return False
        if not isSquareValid(puzzle, i):
            return False
    return True

assert(True == isValid(PUZZLE))

def solve(puzzle):
    index = puzzle.index(None)
    for i in range(0, 10):
        copy = list(puzzle)
        copy[index] = i

        valid = isValid(copy)
        complete = isComplete(copy)

        if valid and complete:
            return copy

        if valid:
            recurse = solve(copy)
            if recurse is not None:
                return recurse

    return None

def pretty(puzzle):
    s = ""
    for r in range(0, 9):
        for c in range(0, 9):
            index = r*9+c
            char = puzzle[index]
            if char is None:
                s += "-"
            else:
                s += str(char)
            s += " "
        s += "\n"
    return s

assert(pretty(PUZZLE) == """- - - 5 - 6 - - - 
- - - - - - - 6 2 
7 - 4 - 1 - - - - 
9 - - - 4 3 - - 7 
- 2 - - - - - - - 
- 8 - - 9 - - 5 - 
- - - - - - - - - 
3 - - - - 8 7 - - 
- 5 - 3 - 4 - - 1 
""")

if __name__ == "__main__":
    puzzle = load(sys.argv[1])

    if isValid(puzzle):
        if isComplete(puzzle):
            print pretty(puzzle)
        else:
            print pretty(solve(puzzle))
    else:
        print "invalid puzzle"
